# Development environment with both backend and frontend
services:
  fastapi:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - /app/.venv
    env_file:
      - .env.dev
    depends_on:
      - postgres
      - redis
      - qdrant
    networks:
      - backend
    command: uv run uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload

#  frontend:
#    build:
#      context: ./frontend
#      dockerfile: Dockerfile.dev
#    ports:
#      - "5173:5173"
#    volumes:
#      - ./frontend:/app
#      - /app/node_modules  # Prevent node_modules from being overwritten by host
#    environment:
#      - VITE_API_BASE_URL=http://localhost:8000
#    networks:
#      - backend
#    stdin_open: true
#    tty: true

#  worker_send_mail:
#    build:
#      context: ./backend
#      dockerfile: Dockerfile.dev
#    volumes:
#      - ./backend:/app
#      - /app/.venv
#    env_file:
#      - .env.dev
#    depends_on:
#      - redis
#      - postgres
#    networks:
#      - backend
#    command: uv run arq src.workers.send_mail.WorkerSettings

  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-btl_oop_dev}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "5433:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    ports:
      - "6479:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
    volumes:
      - qdrant_dev_data:/qdrant/storage
    networks:
      - backend

volumes:
  postgres_dev_data:
  redis_dev_data:
  qdrant_dev_data:

networks:
  backend:
    driver: bridge

