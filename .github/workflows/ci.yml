name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  # Detect which parts of the monorepo changed
  detect_changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v5
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            backend:
              - 'backend/**'
              - 'docker-compose.*.yml'
              - '.github/workflows/ci.yml'
            frontend:
              - 'frontend/**'
              - '.github/workflows/ci.yml'


  # Backend Tests
  test_backend:
    needs: detect_changes
    if: needs.detect_changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v6
        with:
          python-version: "3.11"
      - run: pip install uv
      - name: Install dependencies
        working-directory: backend
        run: uv sync --dev
      - name: Lint
        working-directory: backend
        run: uv run ruff check .
      - name: Run tests
        working-directory: backend
        run: uv run pytest -q || [ $? -eq 5 ]

  # Frontend Tests & Lint
  test_frontend:
    needs: detect_changes
    if: needs.detect_changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v5
      
      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npx tsc --noEmit

      - name: Build test
        run: npm run build
        env:
          VITE_API_BASE_URL: http://localhost:8000

  # Build and Push Backend Image
  build_and_push_backend:
    needs: [detect_changes, test_backend]
    if: |
      always() && 
      needs.detect_changes.outputs.backend == 'true' &&
      (needs.test_backend.result == 'success' || needs.test_backend.result == 'skipped')
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: adc300/btl_oop
    steps:
      - uses: actions/checkout@v5
      - uses: docker/setup-buildx-action@v3

      - name: Free up disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          docker system prune -af
          sudo apt-get clean
          sudo apt-get autoremove -y

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker meta (tags)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,prefix=sha-

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max

    outputs:
      image_latest: ${{ env.IMAGE_NAME }}:latest
      image_sha: ${{ env.IMAGE_NAME }}:sha-${{ github.sha }}

  # Build and Push Frontend Image
  build_and_push_frontend:
    needs: [detect_changes, test_frontend]
    if: |
      always() && 
      needs.detect_changes.outputs.frontend == 'true' &&
      (needs.test_frontend.result == 'success' || needs.test_frontend.result == 'skipped')
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: adc300/btl_oop_frontend
    steps:
      - uses: actions/checkout@v5
      - uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker meta (tags)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,prefix=sha-

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL || 'http://localhost:8000' }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max

    outputs:
      image_latest: ${{ env.IMAGE_NAME }}:latest
      image_sha: ${{ env.IMAGE_NAME }}:sha-${{ github.sha }}

#  notify:
#    runs-on: ubuntu-latest
#    needs:
#      - build_and_push_backend
#      - test_backend
#    if: always()
#    permissions:
#      actions: read
#      contents: read
#    steps:
#      - uses: actions/checkout@v5
#      - name: Send webhook
#        uses: ./.github/actions/notify
#        with:
#          webhook_url: ${{ secrets.WEBHOOK_URL }}
#          webhook_secret: ${{ secrets.WEBHOOK_SECRET }}